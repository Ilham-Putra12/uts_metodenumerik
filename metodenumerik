#nomer1
def f(x):
    return x**3 - x + 3 - 4

def bisection(a, b, tolerance, max_iterations):
    iteration = 0

    while (b - a) / 2 > tolerance and iteration < max_iterations:
        c = (a + b) / 2
        if f(c) == 0:
            return c
        elif f(c) * f(a) < 0:
            b = c
        else:
            a = c
        iteration += 1

    return (a + b) / 2

# Contoh penggunaan
a = -2.0
b = 2.0
tolerance = 1e-6
max_iterations = 100

solusi = bisection(a, b, tolerance, max_iterations)

if solusi is not None:
    print("Solusi dari persamaan nonlinier adalah:", solusi)
else:
    print("Metode biseksi tidak konvergen.")

#nomer2
# Solving the linear equation 2x - 4 = 8

# Import the sympy library for symbolic mathematics
from sympy import symbols, Eq, solve

# Define the variable x
x = symbols('x')

# Define the linear equation
equation = Eq(2*x - 4, 8)

# Solve the equation for x
solution = solve(equation, x)

# Print the solution
print(f"The solution for x is: {solution}")


    
